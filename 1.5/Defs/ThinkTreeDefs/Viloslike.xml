<?xml version="1.0" encoding="utf-8" ?>
<Defs>
  
  <ThinkTreeDef>
    <defName>Viloslike</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        
        <!-- some things copied from the humanlike think tree -->
        
        <!-- RW: If we HAVE to keep lying down... -->
        <li Class="ThinkNode_ConditionalMustKeepLyingDown">
          <subNodes>
            
            <!-- RW: Do a queued job if possible -->
            <li Class="ThinkNode_QueuedJob">
              <inBedOnly>true</inBedOnly>
            </li>
            
            <!-- RW: Get joy -->
            <li Class="ThinkNode_Tagger">
              <tagToGive>SatisfyingNeeds</tagToGive>
              <subNodes>
                <li Class="ThinkNode_PrioritySorter">
                  <subNodes>
                    <li Class="ThinkNode_Priority_GetJoy">
                      <subNodes><li Class="JobGiver_GetJoyInBed"/></subNodes>
                    </li>
                    <li Class="JobGiver_MeditateInBed"/>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            
            <!-- RW: Keep lying down -->
            <li Class="JobGiver_KeepLyingDown"/>
          </subNodes>
        </li>
        
        
        
        <li Class="ThinkNode_Subtree">
          <treeDef>Downed</treeDef>
        </li>
        <li Class="ThinkNode_Subtree">
          <!-- I don't think I need this one -->
          <treeDef>BurningResponse</treeDef>
        </li>
        <li Class="ThinkNode_Subtree">
          <treeDef>MentalStateCritical</treeDef>
        </li>
        
        <!-- RW: Escaping threats -->
        <li Class="ThinkNode_Subtree" MayRequire="Ludeon.RimWorld.Biotech">
          <treeDef>Abilities_Escape</treeDef>
        </li>
        
        <!-- RW: React to close melee threat -->
        <li Class="JobGiver_ReactToCloseMeleeThreat"/>
        
        <!-- RW: Mental state non critical -->
        <li Class="ThinkNode_Subtree">
          <treeDef>MentalStateNonCritical</treeDef>
        </li>
        
        
        <!-- RW: Behavior when roped -->
        <li Class="ThinkNode_Subtree">
          <treeDef>RopedPawn</treeDef>
        </li>
        
        <!-- RW: Insertion hook for modders -->
        <li Class="ThinkNode_SubtreesByTag">
          <insertTag>Humanlike_PostMentalState</insertTag>
        </li>
        
        <!-- RW: Do a queued job -->
        <li Class="ThinkNode_QueuedJob"/>
        
        <!-- RW: Wait if drafted -->
        <li Class="ThinkNode_ConditionalColonist">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>DraftedOrder</tagToGive>
              <subNodes>
                [li Class="JobGiver_MoveToStandable"]
                [li Class="JobGiver_Orders"]
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- RW: Self-tend if you're an NPC -->
        <li Class="ThinkNode_ConditionalNPCCanSelfTendNow">
          <subNodes><li Class="JobGiver_SelfTend"/></subNodes>
        </li>
        
        <!-- vilos don't have anything like land lords, so I'm not including this -->
        <!-- RW: Lord directives -->
        
        <!-- I don't know what vilos do with prisoners, or how they're supposed to behave. -->
        <!-- I'll just copy what RimWorld does because it's part of the gameplay, how new colonists are aquired. -->
        <!-- RW: Prisoner -->
        <!-- BEGIN Prisoner -->
        <li Class="ThinkNode_ConditionalPrisoner">
          <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
          <subNodes>
            <!-- RW: If it's the player home map... -->
            <li Class="ThinkNode_ConditionalInNonPlayerHomeMap">
              <invert>true</invert>
              <subNodes>
                <!-- RW: Wait instead of escaping if should -->
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Idle</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_PrisonerWaitInsteadOfEscaping">
                      <maxDanger>Deadly</maxDanger>
                    </li>
                  </subNodes>
                </li>
                <!-- RW: Escape -->
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Escaping</tagToGive>
                  <subNodes><li Class="JobGiver_PrisonerEscape"/></subNodes>
                </li>
              </subNodes>
            </li>
            
            <!-- RW: Exit map if released -->
            <li Class="ThinkNode_ConditionalReleased">
              <subNodes>
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Misc</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_ExitMapBest">
                      <defaultLocomotion>Walk</defaultLocomotion>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>RestingForMedicalReasons</tagToGive>
              <subNodes><li Class="JobGiver_PatientGoToBed"/></subNodes>
            </li>
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>ChangingApparel</tagToGive>
              <subNodes><li Class="JobGiver_PrisonerGetDressed"/></subNodes>
            </li>
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>SatisfyingNeeds</tagToGive>
              <subNodes>
                <li Class="ThinkNode_PrioritySorter">
                  <subNodes>
                    <li Class="JobGiver_GetRest"/>
                    <li Class="ThinkNode_Priority_GetJoy">
                      <subNodes>
                        <li Class="JobGiver_GetJoy"/>
                        <li Class="JobGiver_GetJoyInBed"/>
                      </subNodes>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            
            <!-- RW: If in non-PlayerHomeMap -->
            <li Class="ThinkNode_ConditionalInNonPlayerHomeMap">
              <subNodes>
                <!-- RW: No colonist spawned in the map -->
                <li Class="ThinkNode_ConditionalAnyUndownedColonistSpawnedNearby">
                  <invert>true</invert>
                  <subNodes>
                    <li Class="ThinkNode_Tagger">
                      <tagToGive>Escaping</tagToGive>
                      <subNodes><li Class="JobGiver_PrisonerEscape"/></subNodes>
                    </li>
                  </subNodes>
                </li>
                <!-- RW: Wander -->
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Idle</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_WanderColony">
                      <maxDanger>Deadly</maxDanger>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>Idle</tagToGive>
              <subNodes>
                <li Class="JobGiver_WanderCurrentRoom">
                  <maxDanger>Deadly</maxDanger>
                </li>
              </subNodes>
            </li>
            
            <li Class="JobGiver_IdleError"/>
          </subNodes>
        </li>
        <!-- END Prisoner -->
        
        <!-- RW: If on Colonist team, do forced and emergency work -->
        <!-- BEGIN emergency work -->
        <li Class="ThinkNode_ConditionalColonist">
          <subNodes>
            <!-- RW: Seek allowed area -->
            <li Class="JobGiver_SeekAllowedArea"/>
            
            <!-- RW: Seek safe temperatures -->
            <li Class="JobGiver_BringBabyToSafety"/>
            <li Class="JobGiver_SeekSafeTemperature"/>
            
            <!-- do something when overheating -->
            
            <!-- RW: Drop unused inventory -->
            <li Class="JobGiver_DropUnusedInventory"/>
            
            <!-- RW: Emergency work -->
            <li Class="JobGiver_Work">
              <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
              <emergency>true</emergency>
            </li>
            
            <!-- RW: Get food (only if starving) -->
            <li Class="ThinkNode_ConditionalStarving">
              <subNodes>
                <li Class="ThinkNode_Tagger">
                  <tagToGive>SatisfyingNeeds</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_GetFood">
                      <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            
            <!-- RW: Breastfeed -->
            
            <!-- RW: Lord directives (medium priority) -->
            
            <!-- can I make this prefer vilos weapons? -->
            <!-- RW: Pick up a weapon dropped while previously downed -->
            <li Class="JobGiver_PickupDroppedWeapon">
              <ignoreForbidden>true</ignoreForbidden>
            </li>
            
            <!-- vilos don't wear clothes, but they might carry exessories -->
            <!-- for mechs, pieces of armor could count as clothes, idk. -->
            <!-- oh! I could make Vilos swap out damaged scanners and antenna -->
            <!-- RW: Optimize apparel -->
            <li Class="ThinkNode_Tagger">
              <tagToGive>ChangingApparel</tagToGive>
              <subNodes>
                <!-- write the thing to replace this later -->
                <li Class="JobGiver_OptimizeApparel">
                  <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
                </li>
              </subNodes>
            </li>
            
            <!-- there are two things written for Idology here: look change and Dye hair. -->
            <!-- Vilos sometimes decide to change their color pattern, so later I could figure out a way to implement that. -->
            
            <!-- RW: Take for inventory stock -->
            <li Class="ThinkNode_Tagger">
              <tagToGive>TakeForInventoryStock</tagToGive>
              <subNodes>
                <li Class="JobGiver_TakeForInventoryStock">
                  <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
                </li>
              </subNodes>
            </li>
            
            <!-- RW: Unload your inventory -->
            <li Class="ThinkNode_Tagger">
              <tagToGive>UnloadingOwnInventory</tagToGive>
              <subNodes><li Class="JobGiver_UnloadYourInventory"/></subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- vilos don't need to eat, only sometimes refuel? -->
        <!-- RW: Pack food if not hungry -->
        <!-- END emergency work -->
        
        
        <!-- RW: Behavior from traits -->
        <li Class="ThinkNode_TraitBehaviors"/>
        
        <!-- change to "Viloslike_PreMain" later -->
        <!-- RW: Insertion hook for modders -->
        <li Class="ThinkNode_SubtreesByTag">
          <insertTag>Humanlike_PreMain</insertTag>
        </li>
        
        <!-- Main vilos colonist behavior core -->
        <li Class="ThinkNode_ConditionalColonist">
          <subNodes>
            <li Class="ThinkNode_Subtree">
              <treeDef>Viloslike_MainColonistBehaviorCore</treeDef>
              <leaveJoinableLordIfIssuesJob>true</leaveJoinableLordIfIssuesJob>
            </li>
          </subNodes>
        </li>
        <!-- todo: something here for transitioned vilos -->
        <!-- they behave differently -->
        
        <!-- Insertion hook for modders -->
        <li Class="ThinkNode_SubtreesByTag">
          <insertTag>Humanlike_PostMain</insertTag>
        </li>
        
        <!-- Idle colonist -->
        <li Class="ThinkNode_ConditionalColonist">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>Idle</tagToGive>
              <subNodes>
                <!-- Do random joy activity -->
                <li Class="ThinkNode_ConditionalNeedPercentageAbove">
                  <need>Joy</need>
                  <threshold>0.9</threshold>
                  <invert>true</invert>
                  <subNodes><li Class="JobGiver_IdleJoy"/></subNodes>
                </li>
                
                <!-- Wander -->
                <li Class="JobGiver_WanderColony">
                  <maxDanger>None</maxDanger>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- so hurt hostile pawns son't use medical beds? -->
        <!-- RW: If you're a neutral guest, if you're not hurt exit the map, otherwise use a medical bed -->
        <li Class="ThinkNode_ConditionalGuest">
          <subNodes>
            <li Class="ThinkNode_ConditionalNonPlayerNonHostileFactionOrFactionless">
              <subNodes>
                <li Class="ThinkNode_Tagger">
                  <tagToGive>RestingForMedicalReasons</tagToGive>
                  <subNodes><li Class="JobGiver_PatientGoToBed"/></subNodes>
                </li>
                
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Misc</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_ExitMapBest">
                      <defaultLocomotion>Walk</defaultLocomotion>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        
        
        <!-- RW: Final backup: If you're just here for no apparent reason, and not a colonist, leave the map -->
        <!-- e.g. This happens for pawns who are downed during combat, then later self-heal -->
        <li Class="ThinkNode_ConditionalColonist">
          <invert>true</invert>
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>Misc</tagToGive>
              <subNodes>
                <li Class="JobGiver_ExitMapBest">
                  <defaultLocomotion>Walk</defaultLocomotion>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- RW: If you can't leave, just wander -->
        <li Class="ThinkNode_Tagger">
          <tagToGive>Idle</tagToGive>
          <subNodes>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        
        <li Class="JobGiver_IdleError"/>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <ThinkTreeDef>
    <defName>ViloslikeConstant</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>
        
        <li Class="ThinkNode_ConditionalCanDoConstantThinkTreeJobNow">
          <subNodes>
            <!-- Flee explosion -->
            <li Class="JobGiver_FleePotentialExplosion"/>
            
            <!-- Join auto joinable caravan -->
            <li Class="ThinkNode_Subtree">
              <treeDef>JoinAutoJoinableCaravan</treeDef>
            </li>
            
            <!-- Hostility response -->
            <li Class="JobGiver_ConfigurableHostilityResponse"/>
          </subNodes>
        </li>
        
        <li Class="ThinkNode_ConditionalCanDoLordJobNow">
          <subNodes>
            <!-- Lord directives -->
            <li Class="ThinkNode_Subtree">
              <treeDef>LordDutyConstant</treeDef>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
</Defs>
